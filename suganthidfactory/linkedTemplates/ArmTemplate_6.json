{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "suganthidfactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/lkp_tgt_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/orderline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER_LINES.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "String"
					},
					{
						"name": "UNIT_PRICE",
						"type": "String"
					},
					{
						"name": "QUANTITY",
						"type": "String"
					},
					{
						"name": "PROMOTION_AMOUNT",
						"type": "String"
					},
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/payment_ref')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "PAYMENT_REF_DIM.csv",
						"folderPath": "target/AzureProject/DIMTABLE",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_topping')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_TOPPINGS.csv",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					},
					{
						"name": "TOPPING_NAME",
						"type": "String"
					},
					{
						"name": "TOPING_PRICE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PARAMDATASET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().PARAMDATASET",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SRCPARAMDATA": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().SRCPARAMDATA",
							"type": "Expression"
						},
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_multifile_lkp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DEPT_*.csv",
						"folderPath": "source/SRC_FOREACH_LKP",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_not_parameterized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "HR_EMPLOYEES_NEW.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_prac_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"scr_dept_param": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().scr_dept_param",
							"type": "Expression"
						},
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "SK",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_not_parameterized')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TGT_DEPT_50.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "SK",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_prac_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgt_dept_param": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tgt_dept_param",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LOCATION_ID",
						"type": "String"
					},
					{
						"name": "STREET_ADDRESS",
						"type": "String"
					},
					{
						"name": "POSTAL_CODE",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE_PROVINCE",
						"type": "String"
					},
					{
						"name": "COUNTRY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_LOCATION_STG",
								"type": "DatasetReference"
							},
							"name": "locationdimquery"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_LOCATIONS_DIMSCD",
								"type": "DatasetReference"
							},
							"name": "insert"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_LOCATIONS_DIMSCD",
								"type": "DatasetReference"
							},
							"name": "update"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          src_Store_Location_ID as short,",
						"          src_Store_Name as string,",
						"          src_Store_Address as string,",
						"          src_Store_Open_Time as string,",
						"          src_Store_Close_Time as string,",
						"          src_State_Name as string,",
						"          tgt_Store_Location_ID as integer,",
						"          tgt_Store_Name as string,",
						"          tgt_Store_Address as string,",
						"          tgt_Store_Open_Time as string,",
						"          tgt_Store_Close_Time as string,",
						"          tgt_State_Name as string,",
						"          tgt_FLAG as string,",
						"          Loc_Dim_Key as integer,",
						"          DM_CREATE_DATE as date,",
						"          src_md5 as binary,",
						"          tgt_md5 as binary,",
						"          flag_new as string,",
						"          flag_deactivate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\nsrc_Store_Location_ID\\n,src_Store_Name\\n,src_Store_Address\\n,src_Store_Open_Time\\n,src_Store_Close_Time\\n,src_State_Name\\n,tgt_Store_Location_ID\\n,tgt_Store_Name\\n,tgt_Store_Address\\n,tgt_Store_Open_Time\\n,tgt_Store_Close_Time\\n,tgt_State_Name\\n,tgt_FLAG\\n,Loc_Dim_Key\\n,DM_CREATE_DATE\\n,src_md5\\n,tgt_md5\\n,case when tgt_Store_Location_ID is NULL or src_md5 <> tgt_md5 then \\'Y\\' end flag_new\\n,case when tgt_Store_Location_ID is not NULL and src_md5 <> tgt_md5 then \\'N\\' end flag_deactivate\\nfrom ( \\nselect \\nA.Store_Location_ID as src_Store_Location_ID,\\nA.Store_Name as src_Store_Name,\\nA.Store_Address as src_Store_Address,\\nA.Store_Open_Time as src_Store_Open_Time,\\nA.Store_Close_Time as src_Store_Close_Time,\\nA.State_Name as src_State_Name,\\nB.Store_Location_ID as tgt_Store_Location_ID,\\nB.Store_Name as tgt_Store_Name,\\nB.Store_Address as tgt_Store_Address,\\nB.Store_Open_Time as tgt_Store_Open_Time,\\nB.Store_Close_Time as tgt_Store_Close_Time,\\nB.State_Name as tgt_State_Name,\\nB.FLAG as tgt_FLAG,\\nB.Loc_Dim_Key,\\ncast(getdate() as date) as DM_CREATE_DATE,\\nHashBytes(\\'MD5\\',concat(cast(A.Store_Name as varchar),cast(A.Store_Address as varchar),cast(A.Store_Open_Time as varchar),cast(A.Store_Close_Time as varchar),cast(A.State_Name as varchar))) as src_md5,\\nHashBytes(\\'MD5\\',concat(cast(B.Store_Name as varchar),cast(B.Store_Address as varchar),cast(B.Store_Open_Time as varchar),cast(B.Store_Close_Time as varchar),cast(B.State_Name as varchar))) as tgt_md5\\nfrom HR.locations_dim A \\nleft Join HR.location_dim1 B on \\nA.Store_Location_ID = B.Store_Location_ID\\nand B.FLAG = \\'Y\\'\\n)a',",
						"     format: 'query') ~> locationdimquery",
						"locationdimquery filter(isNull(tgt_Store_Location_ID) || src_md5 != tgt_md5) ~> filter1",
						"locationdimquery filter(!isNull(tgt_Store_Location_ID) && src_md5 != tgt_md5) ~> filter2",
						"filter2 alterRow(updateIf(1==1)) ~> alterRow1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Store_Location_ID = src_Store_Location_ID,",
						"          Store_Name = src_Store_Name,",
						"          Store_Address = src_Store_Address,",
						"          Store_Open_Time = src_Store_Open_Time,",
						"          Store_Close_Time = src_Store_Close_Time,",
						"          State_Name = src_State_Name,",
						"          DM_CREATE_DATE,",
						"          FLAG = flag_new",
						"     )) ~> insert",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Loc_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Loc_Dim_Key,",
						"          FLAG = flag_deactivate",
						"     )) ~> update"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_PRODUCT_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "PRODUCTSDIMJOIN"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "PRODUCTDIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "INSERTSINK"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "UPDATESINK"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select3"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PRODUCTSDIMJOIN",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PRODUCTDIM",
						"cast1 filter(IS_ACTIVE == 'Active') ~> filter1",
						"filter1 derive(SRC_MD5 = md5(concat(PRODUCT_NAME,toString(PRODUCT_PRICE),PRODUCT_DESCRIPTION,toString(PRODUCT_SUBCATEGORY_ID),PRODUCT_SUBCATEGORY_NAME,PRODUCT_SIZE,PRODUCT_CATEGORY_NAME,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn1",
						"derivedColumn4 select(mapColumn(",
						"          Surr_Product_kEY,",
						"          Tgt_Product_ID = Product_ID,",
						"          Tgt_Product_Name = Product_Name,",
						"          Tgt_Product_Price = Product_Price,",
						"          Tgt_Is_Active = Is_Active,",
						"          Tgt_PRODUCT_CATEGORY_ID = PRODUCT_CATEGORY_ID,",
						"          Tgt_Product_Category_Name = Product_Category_Name,",
						"          Tgt_Product_SubCategory_ID = Product_SubCategory_ID,",
						"          Tgt_Product_SubCategory_Name = Product_SubCategory_Name,",
						"          Tgt_Product_Size = Product_Size,",
						"          Tgt_Product_Description = Product_Description,",
						"          Eff_Start_Date,",
						"          Eff_End_Date,",
						"          Tgt_DM_CREATE_DATE = DIM_CREATE_DATE,",
						"          TGT_MD5,",
						"          FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 lookup(PRODUCT_ID == Tgt_Product_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"filter5 derive(TGT_MD5 = md5(concat(Product_Name,toString(Product_Price),Product_Description,toString(Product_SubCategory_ID),Product_SubCategory_Name,Product_Size,Product_Category_Name,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn4",
						"PRODUCTSDIMJOIN cast(output(",
						"          PRODUCT_DIM_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(10,2),",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     errors: true) ~> cast1",
						"PRODUCTDIM cast(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(10,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     errors: true) ~> cast2",
						"lookup1 filter(SRC_MD5 != TGT_MD5) ~> filter3",
						"filter3 derive(Eff_End_Date = currentDate(),",
						"          Flag = 0) ~> derivedColumn5",
						"derivedColumn6 select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_CATEGORY_ID,",
						"          CREATE_USER_DATE,",
						"          Eff_Start_Date,",
						"          DIM_CREATE_DATE,",
						"          Flag = derivedColumn6@Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn5 alterRow(updateIf(1==1)) ~> alterRow1",
						"filter4 derive(Eff_Start_Date = currentDate(),",
						"          DIM_CREATE_DATE = currentDate(),",
						"          Flag = 1) ~> derivedColumn6",
						"lookup1 filter(isNull(Surr_Product_kEY) || SRC_MD5 != TGT_MD5) ~> filter4",
						"cast2 filter(isNull(Eff_End_Date) == true() && (FLAG == 1)) ~> filter5",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_ID = PRODUCT_ID,",
						"          Product_Name = PRODUCT_NAME,",
						"          Product_Price = PRODUCT_PRICE,",
						"          Is_Active = IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          Product_Category_Name = PRODUCT_CATEGORY_NAME,",
						"          Product_SubCategory_ID = PRODUCT_SUBCATEGORY_ID,",
						"          Product_SubCategory_Name = PRODUCT_SUBCATEGORY_NAME,",
						"          Product_Size = PRODUCT_SIZE,",
						"          Product_Description = PRODUCT_DESCRIPTION,",
						"          Eff_Start_Date,",
						"          DIM_CREATE_DATE,",
						"          FLAG = Flag",
						"     )) ~> INSERTSINK",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surr_Product_kEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surr_Product_kEY,",
						"          Eff_End_Date,",
						"          FLAG = derivedColumn5@Flag",
						"     )) ~> UPDATESINK"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_PRODUCT_DIM_FLAG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PRODUCT_DIM",
								"type": "DatasetReference"
							},
							"name": "PRODUCTSDIMJOIN"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "PRODUCTDIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "UPDATE"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable4",
								"type": "DatasetReference"
							},
							"name": "INSERT"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "cast1"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select3"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "filter4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PRODUCTSDIMJOIN",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM hr.PRODUCT_DIM_FLAG\\nWHERE FLAG == 1',",
						"     format: 'query') ~> PRODUCTDIM",
						"cast1 filter(IS_ACTIVE == 'Active') ~> filter1",
						"filter1 derive(SRC_MD5 = md5(concat(PRODUCT_NAME,toString(PRODUCT_PRICE),PRODUCT_DESCRIPTION,toString(PRODUCT_SUBCATEGORY_ID),PRODUCT_SUBCATEGORY_NAME,PRODUCT_SIZE,PRODUCT_CATEGORY_NAME,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn1",
						"derivedColumn4 select(mapColumn(",
						"          Surr_Product_kEY,",
						"          Tgt_Product_ID = Product_ID,",
						"          Tgt_Product_Name = Product_Name,",
						"          Tgt_Product_Price = Product_Price,",
						"          Tgt_Is_Active = Is_Active,",
						"          Tgt_PRODUCT_CATEGORY_ID = PRODUCT_CATEGORY_ID,",
						"          Tgt_Product_Category_Name = Product_Category_Name,",
						"          Tgt_Product_SubCategory_ID = Product_SubCategory_ID,",
						"          Tgt_Product_SubCategory_Name = Product_SubCategory_Name,",
						"          Tgt_Product_Size = Product_Size,",
						"          Tgt_Product_Description = Product_Description,",
						"          Eff_Start_Date,",
						"          Eff_End_Date,",
						"          Tgt_DM_CREATE_DATE = DIM_CREATE_DATE,",
						"          TGT_MD5,",
						"          FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 lookup(PRODUCT_ID == Tgt_Product_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"PRODUCTDIM derive(TGT_MD5 = md5(concat(Product_Name,toString(Product_Price),Product_Description,toString(Product_SubCategory_ID),Product_SubCategory_Name,Product_Size,Product_Category_Name,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn4",
						"PRODUCTSDIMJOIN cast(output(",
						"          PRODUCT_DIM_KEY as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as decimal(10,2),",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as integer,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          CREATE_USER_DATE as date",
						"     ),",
						"     errors: true) ~> cast1",
						"lookup1 filter(SRC_MD5 != TGT_MD5) ~> filter3",
						"filter3 derive(Eff_End_Date = currentDate(),",
						"          FLAG = 0) ~> derivedColumn5",
						"derivedColumn6 select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_NAME,",
						"          PRODUCT_CATEGORY_ID,",
						"          CREATE_USER_DATE,",
						"          Eff_Start_Date,",
						"          DIM_CREATE_DATE,",
						"          Flag = FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn5 alterRow(updateIf(1==1)) ~> alterRow1",
						"filter4 derive(Eff_Start_Date = currentDate(),",
						"          DIM_CREATE_DATE = currentDate(),",
						"          FLAG = 1) ~> derivedColumn6",
						"lookup1 filter(isNull(Surr_Product_kEY) || SRC_MD5 != TGT_MD5) ~> filter4",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surr_Product_kEY,",
						"          Eff_End_Date,",
						"          FLAG",
						"     )) ~> UPDATE",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_ID = PRODUCT_ID,",
						"          Product_Name = PRODUCT_NAME,",
						"          Product_Price = PRODUCT_PRICE,",
						"          Is_Active = IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          Product_Category_Name = PRODUCT_CATEGORY_NAME,",
						"          Product_SubCategory_ID = PRODUCT_SUBCATEGORY_ID,",
						"          Product_SubCategory_Name = PRODUCT_SUBCATEGORY_NAME,",
						"          Product_Size = PRODUCT_SIZE,",
						"          Product_Description = PRODUCT_DESCRIPTION,",
						"          Eff_Start_Date,",
						"          DIM_CREATE_DATE,",
						"          FLAG = Flag",
						"     )) ~> INSERT"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_PRODUCT_TOPPINGS_DIM_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "azure_prod_topp",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Azure_PROD_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_PROD_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "INSERT"
						},
						{
							"dataset": {
								"referenceName": "Azure_PROD_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "UPDATE"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filter3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as decimal(10,2),",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Product_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Flag as string,",
						"          Effective_Date as date,",
						"          End_Date as date,",
						"          Stg_Create_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"derivedColumn3, derivedColumn1 lookup(source1@PRODUCT_TOPPING_ID == source2@Product_Topping_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"filter3 derive(TGT_MD5 = md5(Topping_Name,toString(Topping_Price),Is_Active)) ~> derivedColumn1",
						"lookup1 derive(STG_CREATE_DATE = currentDate(),",
						"          START_DATE = currentDate(),",
						"          ACTIVE_FLAG = 'Y') ~> derivedColumn2",
						"source1 derive(SRC_MD5 = md5(TOPPING_NAME,toString(TOPING_PRICE),IS_ACTIVE)) ~> derivedColumn3",
						"lookup1 derive(End_Date = currentDate(),",
						"          DEACTIVE_FLAG = 'N') ~> derivedColumn4",
						"derivedColumn4 filter(!isNull(source2@Product_Topping_ID) && SRC_MD5 != TGT_MD5) ~> filter1",
						"derivedColumn2 filter(isNull(source2@Product_Topping_ID) || SRC_MD5 != TGT_MD5) ~> filter2",
						"filter1 alterRow(updateIf(1==1)) ~> alterRow1",
						"source2 filter(isNull(End_Date) == true() && Flag == 'Y') ~> filter3",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Flag as string,",
						"          Effective_Date as date,",
						"          End_Date as date,",
						"          Stg_Create_Date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_ID = source1@PRODUCT_TOPPING_ID,",
						"          Topping_Name = source1@TOPPING_NAME,",
						"          Topping_Price = TOPING_PRICE,",
						"          Is_Active = source1@IS_ACTIVE,",
						"          Flag = ACTIVE_FLAG,",
						"          Effective_Date = START_DATE,",
						"          End_Date,",
						"          Stg_Create_Date = derivedColumn2@STG_CREATE_DATE",
						"     )) ~> INSERT",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Flag as string,",
						"          Effective_Date as date,",
						"          End_Date as date,",
						"          Stg_Create_Date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Product_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Dim_Key,",
						"          End_Date,",
						"          Flag = DEACTIVE_FLAG",
						"     )) ~> UPDATE"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_PROMOTION_SCD3_QUERYDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ASSIGNMENT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_QUERY",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_DIM_JOIN",
								"type": "DatasetReference"
							},
							"name": "INSERTSINK"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_DIM_JOIN",
								"type": "DatasetReference"
							},
							"name": "UPDATESINK"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as string,",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PREV_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_PREV_PROMOTION_TYPE as string,",
						"          TGT_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_PREV_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_START_DATE as date,",
						"          TGT_PREV_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          TGT_PREV_END_DATE as date,",
						"          STG_CREATE_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PS.[PROMOTION_ID] AS SRC_PROMOTION_ID,\\nPS.[PROMOTION_NAME] AS  SRC_PROMOTION_NAME, \\nPS.[PROMOTION_TYPE] AS SRC_PROMOTION_TYPE,\\nPS.[DISCOUNT_AMOUNT] AS SRC_DISCOUNT_AMOUNT,\\nPS.[START_DATE] AS SRC_START_DATE,\\nPS.[END_DATE] AS SRC_END_DATE,\\nPD.[PROMOTION_ID] AS TGT_PROMOTION_ID,\\nPD.[PROMOTION_NAME] AS TGT_PROMOTION_NAME,\\nCASE WHEN PS.[PROMOTION_NAME] <> PD.[PROMOTION_NAME] THEN PD.PROMOTION_NAME ELSE NULL END AS TGT_PREV_PROMOTION_NAME,\\nPD.[PROMOTION_TYPE] AS TGT_PROMOTION_TYPE,\\nCASE WHEN PS.[PROMOTION_TYPE] <> PD.[PROMOTION_TYPE] THEN PD.[PROMOTION_TYPE] ELSE NULL END AS TGT_PREV_PROMOTION_TYPE,\\nPD.[DISCOUNT_AMOUNT] AS TGT_DISCOUNT_AMOUNT,\\nCASE WHEN PS.[DISCOUNT_AMOUNT] <> PD.[DISCOUNT_AMOUNT] THEN PD.[DISCOUNT_AMOUNT] ELSE NULL END AS TGT_PREV_DISCOUNT_AMOUNT,\\nPD.[START_DATE] AS TGT_START_DATE,\\nCASE WHEN PS.[START_DATE] <> PD.[START_DATE] THEN PD.[START_DATE] ELSE NULL END AS TGT_PREV_START_DATE,\\nPD.[END_DATE] AS TGT_END_DATE,\\nCASE WHEN PS.[END_DATE] <> PD.[END_DATE] THEN PD.[END_DATE] ELSE NULL END AS TGT_PREV_END_DATE,\\nPD.[STG_CREATE_DATE] AS STG_CREATE_DATE,\\nCASE WHEN PD.PROMOTION_ID IS NOT NULL AND PS.[PROMOTION_NAME] <> PD.[PROMOTION_NAME] OR\\nPS.[PROMOTION_TYPE] <> PD.[PROMOTION_TYPE] OR\\nPS.[DISCOUNT_AMOUNT] <> PD.[DISCOUNT_AMOUNT] OR\\nPS.[START_DATE] <> PD.[START_DATE] OR\\nPS.[END_DATE] <> PD.[END_DATE] THEN \\'UPDATE\\' \\nELSE \\'NOVALUE\\' \\nEND AS FLAG_UPDATE,\\nCASE WHEN PD.PROMOTION_ID IS NULL THEN \\'INSERT\\' \\nELSE \\'NOVALUE\\' \\nEND AS FLAG_INSERT\\nFROM [hr].[PROMOTION_STG] AS PS\\nLEFT JOIN [hr].[PROMOTION_DIM] AS PD\\nON PS.[PROMOTION_ID] = PD.[PROMOTION_ID]',",
						"     format: 'query') ~> source1",
						"select1 filter(FLAG_INSERT == 'INSERT') ~> filter1",
						"select1 filter(FLAG_UPDATE == 'UPDATE') ~> filter2",
						"source1 select(mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE,",
						"          TGT_PROMOTION_ID,",
						"          TGT_PROMOTION_NAME,",
						"          TGT_PREV_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE,",
						"          TGT_PREV_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT,",
						"          TGT_PREV_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE,",
						"          TGT_PREV_START_DATE,",
						"          TGT_END_DATE,",
						"          TGT_PREV_END_DATE,",
						"          STG_CREATE_DATE,",
						"          FLAG_UPDATE,",
						"          FLAG_INSERT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter2 alterRow(updateIf(1==1)) ~> alterRow1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE,",
						"          TGT_PROMOTION_ID,",
						"          TGT_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE,",
						"          TGT_END_DATE,",
						"          STG_CREATE_DATE,",
						"          FLAG_UPDATE,",
						"          FLAG_INSERT",
						"     )) ~> INSERTSINK",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TGT_PROMOTION_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE,",
						"          TGT_PROMOTION_ID,",
						"          TGT_PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          TGT_PREV_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          TGT_PREV_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          TGT_PREV_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE = SRC_START_DATE,",
						"          TGT_PREV_START_DATE,",
						"          TGT_END_DATE,",
						"          TGT_PREV_END_DATE,",
						"          STG_CREATE_DATE,",
						"          FLAG_UPDATE,",
						"          FLAG_INSERT",
						"     )) ~> UPDATESINK"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_PROMOTION_SCD3_QUERYDB_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ASSIGNMENT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_QUERY",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_DIM_JOIN",
								"type": "DatasetReference"
							},
							"name": "INSERTSINK"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMO_DIM_JOIN",
								"type": "DatasetReference"
							},
							"name": "UPDATESINK"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as string,",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PS.[PROMOTION_ID] AS SRC_PROMOTION_ID,PS.[PROMOTION_NAME] AS  SRC_PROMOTION_NAME, PS.[PROMOTION_TYPE] AS SRC_PROMOTION_TYPE,PS.[DISCOUNT_AMOUNT] AS SRC_DISCOUNT_AMOUNT,\\nPS.[START_DATE] AS SRC_START_DATE,PS.[END_DATE] AS SRC_END_DATE,PD.[PROMOTION_ID] AS TGT_PROMOTION_ID,PD.[PROMOTION_NAME] AS TGT_PROMOTION_NAME,PD.[PROMOTION_TYPE] AS TGT_PROMOTION_TYPE,\\nPD.[DISCOUNT_AMOUNT] AS TGT_DISCOUNT_AMOUNT,PD.[START_DATE] AS TGT_START_DATE,PD.[END_DATE] AS TGT_END_DATE,\\nCASE WHEN PD.PROMOTION_ID IS NOT NULL AND PS.[DISCOUNT_AMOUNT] <> PD.[DISCOUNT_AMOUNT] THEN \\'UPDATE\\' ELSE \\'NOVALUE\\' END AS FLAG_UPDATE,\\nCASE WHEN PD.PROMOTION_ID IS NULL THEN \\'INSERT\\' ELSE \\'NOVALUE\\' END AS FLAG_INSERT\\nFROM [hr].[PROMOTION_STG] AS PS\\nLEFT JOIN [hr].[PROMOTION_DIM] AS PD\\nON PS.[PROMOTION_ID] = PD.[PROMOTION_ID]',",
						"     format: 'query') ~> source1",
						"select1 filter(FLAG_INSERT == 'INSERT') ~> filter1",
						"select1 filter(FLAG_UPDATE == 'UPDATE') ~> filter2",
						"cast1 select(mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE,",
						"          TGT_PROMOTION_ID,",
						"          TGT_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE,",
						"          TGT_END_DATE,",
						"          FLAG_UPDATE,",
						"          FLAG_INSERT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter2 alterRow(updateIf(1==1)) ~> alterRow1",
						"source1 cast(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as string,",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     errors: true) ~> cast1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE",
						"     )) ~> INSERTSINK",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TGT_PROMOTION_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SRC_PROMOTION_ID,",
						"          SRC_PROMOTION_NAME,",
						"          SRC_PROMOTION_TYPE,",
						"          SRC_DISCOUNT_AMOUNT,",
						"          SRC_START_DATE,",
						"          SRC_END_DATE,",
						"          TGT_PROMOTION_ID,",
						"          TGT_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE,",
						"          TGT_END_DATE,",
						"          FLAG_UPDATE,",
						"          FLAG_INSERT",
						"     )) ~> UPDATESINK"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_COUNTRY_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select * from hr.countries where country_id=''',concat(activity('Lookup1').output.firstRow.country_id),'''')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DC_COUNTRY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "src_not_parameterized",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "VAR_CID_ASSIGN",
							"value": "'AR'"
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM LOCATIONS WHERE COUNTRY_ID='CA'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DC_COUNTRY",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"COUNTRY_ID": {
						"type": "string",
						"defaultValue": "'CA'"
					}
				},
				"variables": {
					"VAR_CID": {
						"type": "String",
						"defaultValue": "1"
					},
					"VAR_CID_ASSIGN": {
						"type": "String",
						"defaultValue": "'CA'"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T02:59:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_not_parameterized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_DATA_DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_COUNTRY_DB",
								"type": "DatasetReference",
								"parameters": {
									"TGT_TABLE": {
										"value": "@pipeline().parameters.TPARAM_COUNTRY",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TPARAM_COUNTRY": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T03:54:04Z"
			},
			"dependsOn": []
		}
	]
}