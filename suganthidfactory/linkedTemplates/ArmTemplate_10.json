{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "suganthidfactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_SALES_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "order",
								"type": "DatasetReference"
							},
							"name": "ORDER"
						},
						{
							"dataset": {
								"referenceName": "orderline",
								"type": "DatasetReference"
							},
							"name": "ORDERLINE"
						},
						{
							"dataset": {
								"referenceName": "CUSTDIM",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERSDIM"
						},
						{
							"dataset": {
								"referenceName": "LOCDIMPROJ",
								"type": "DatasetReference"
							},
							"name": "LOCATIONSDIM"
						},
						{
							"dataset": {
								"referenceName": "PRODUCTDIMPROJ",
								"type": "DatasetReference"
							},
							"name": "PRODUCTDIM"
						},
						{
							"dataset": {
								"referenceName": "PROD_TOPDIM_PROJ",
								"type": "DatasetReference"
							},
							"name": "PRODUCTTOPPINGDIM"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText_PROMOTION",
								"type": "DatasetReference"
							},
							"name": "PROMOTIONDIM"
						},
						{
							"dataset": {
								"referenceName": "payment_ref",
								"type": "DatasetReference"
							},
							"name": "PAYMENTREF"
						},
						{
							"dataset": {
								"referenceName": "DELIVERY_METHOD",
								"type": "DatasetReference"
							},
							"name": "DELIVERYREF"
						},
						{
							"dataset": {
								"referenceName": "CHANNELREF_PROJ",
								"type": "DatasetReference"
							},
							"name": "CHANNELREF"
						},
						{
							"dataset": {
								"referenceName": "DATE_PROJ",
								"type": "DatasetReference"
							},
							"name": "DATE"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SALES_FACT_PROJ_NEW",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "join5"
						},
						{
							"name": "join6"
						},
						{
							"name": "join7"
						},
						{
							"name": "join8"
						},
						{
							"name": "join9"
						},
						{
							"name": "join10"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          TOTAL_TAX as decimal(10,2),",
						"          TIPS as decimal(10,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ORDER",
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as decimal(10,0) '2',",
						"          QUANTITY as integer,",
						"          PROMOTION_AMOUNT as decimal(10,2),",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ORDERLINE",
						"source(output(",
						"          CUSTOMER_DIM_KEY as integer,",
						"          CUSTOMER_ID as integer,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PRIMARY_EMAIL as string,",
						"          SECONDARY_EMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          R_Address_Lane1 as string,",
						"          R_Address_Lane_2 as string,",
						"          R_City_Name as string,",
						"          R_State_Name as string,",
						"          R_Country_Name as string,",
						"          R_Zip_Code as integer,",
						"          R_Gate_Code as boolean,",
						"          O_ADDRESS_LANE1 as string,",
						"          O_ADDRESS_LANE2 as string,",
						"          O_CITY_NAME as string,",
						"          O_STATE_NAME as string,",
						"          O_COUNTRY_NAME as string,",
						"          O_ZIP_CODE as integer,",
						"          O_GATE_CODE as integer,",
						"          JOINING_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERSDIM",
						"source(output(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LOCATIONSDIM",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as string,",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as integer,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DIM_CREATE_DATE as date,",
						"          FLAG as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PRODUCTDIM",
						"source(output(",
						"          Product_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(10,2),",
						"          Is_Active as string,",
						"          Flag as string,",
						"          Effective_Date as date,",
						"          End_Date as date,",
						"          Stg_Create_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PRODUCTTOPPINGDIM",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          PREVIOUS_DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PROMOTIONDIM",
						"source(output(",
						"          PAYMENT_REF_KEY as integer,",
						"          PAYMENT_ID as integer,",
						"          PAYMENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PAYMENTREF",
						"source(output(",
						"          Delivery_Type_Ref_Key as integer,",
						"          Delivery_ID as integer,",
						"          Delivery_Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DELIVERYREF",
						"source(output(",
						"          Channel_Ref_Key as integer,",
						"          Channel_ID as integer,",
						"          Channel_Type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CHANNELREF",
						"source(output(",
						"          DATE_KEY as integer,",
						"          DAY_YYYY_MM_DD as string,",
						"          DAY_US_MM_DD_YYYY as date,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as string,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as integer,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as integer,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DATE",
						"ORDER, ORDERLINE join(ORDER@ORDER_ID == ORDERLINE@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, CUSTOMERSDIM join(ORDER@CUSTOMER_ID == CUSTOMERSDIM@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, LOCATIONSDIM join(ORDER@STORE_LOCATION_ID == LOCATIONSDIM@Store_Location_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, PRODUCTDIM join(ORDERLINE@PRODUCT_ID == PRODUCTDIM@Product_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4, PRODUCTTOPPINGDIM join(ORDERLINE@PRODUCT_TOPPING_ID == PRODUCTTOPPINGDIM@Product_Topping_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5, PROMOTIONDIM join(ORDERLINE@PROMOTION_ID == PROMOTIONDIM@PROMOTION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6, PAYMENTREF join(ORDER@PAYMENT_ID == PAYMENTREF@PAYMENT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7, DELIVERYREF join(ORDER@DELIVERY_ID == DELIVERYREF@Delivery_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8, CHANNELREF join(ORDER@CHANNEL_ID == CHANNELREF@Channel_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9, DATE join(ORDER_DATE == DAY_US_MM_DD_YYYY,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID = ORDER@ORDER_ID,",
						"          {CUSTOMER_DIM_KEY } = CUSTOMER_DIM_KEY,",
						"          {PAYMENT_REF_KEY } = PAYMENT_REF_KEY,",
						"          {CHANNEL_REF_KEY } = Channel_Ref_Key,",
						"          {DELIVERY_TYPE_REF_KEY } = Delivery_Type_Ref_Key,",
						"          {TOPPING_DIM_KEY } = Surr_Product_kEY,",
						"          {LOCATION_DIM_KEY } = Loc_Dim_Key,",
						"          Product_Dim_Key,",
						"          PROMOTION_DIM_KEY,",
						"          DATE_KEY,",
						"          {ORDER_DATE } = ORDER_DATE,",
						"          {ORDER_STATUS } = ORDER_STATUS,",
						"          QUANTITY,",
						"          UNIT_PRICE,",
						"          Topping_Price,",
						"          PROMOTION_AMOUNT,",
						"          DM_CREATE_DATE = DIM_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_LINE_ID as string,",
						"          ORDER_ID as string,",
						"          {CUSTOMER_DIM_KEY } as string,",
						"          {PAYMENT_REF_KEY } as string,",
						"          {CHANNEL_REF_KEY } as string,",
						"          {DELIVERY_TYPE_REF_KEY } as string,",
						"          {TOPPING_DIM_KEY } as string,",
						"          {LOCATION_DIM_KEY } as string,",
						"          Product_Dim_Key as string,",
						"          PROMOTION_DIM_KEY as string,",
						"          DATE_KEY as string,",
						"          {ORDER_DATE } as string,",
						"          {ORDER_STATUS } as string,",
						"          QUANTITY as string,",
						"          UNIT_PRICE as string,",
						"          Topping_Price as string,",
						"          PROMOTION_AMOUNT as string,",
						"          DM_CREATE_DATE as string",
						"     ),",
						"     partitionFileNames:['SALES_FACT.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID,",
						"          {CUSTOMER_DIM_KEY },",
						"          {PAYMENT_REF_KEY },",
						"          {TOPPING_DIM_KEY },",
						"          {LOCATION_DIM_KEY },",
						"          Product_Dim_Key,",
						"          PROMOTION_DIM_KEY,",
						"          DATE_KEY,",
						"          {ORDER_DATE },",
						"          {ORDER_STATUS },",
						"          QUANTITY,",
						"          UNIT_PRICE,",
						"          Topping_Price,",
						"          PROMOTION_AMOUNT,",
						"          DM_CREATE_DATE",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_SQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_EMP_SRC",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Delimited_DEPT_SRC",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_EMP",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(10,2),",
						"          MANAGER_ID as integer,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as integer,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as integer,",
						"          LOCATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"select1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"source1, source2 join(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          DEPARTMENT_NAME,",
						"          LOCATION_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          LOCATION_ID,",
						"          DEPARTMENT_ID,",
						"          DEPARTMENT_NAME",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_UNION')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_UNION",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Delimited_UNION2",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Delimited_UNION3",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "Delimited_UNION4",
								"type": "DatasetReference"
							},
							"name": "source4"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_EMP_TGT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DEPT_ID as short,",
						"          DEPT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          DEPT_ID as short,",
						"          DEPT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          DEPT_ID as short,",
						"          DEPT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source(output(",
						"          DEPT_ID as short,",
						"          DEPT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source4",
						"source1, source2, source3, source4 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          name as string",
						"     ),",
						"     partitionFileNames:['DEPT_UNION.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_WINDOW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Delimited_EMP_SRC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Delimited_EMP_TGT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(SALARY, true),",
						"     NEXT_SALARY = lead(SALARY),",
						"          LAST_SALARY = lag(SALARY),",
						"          LAG_UNBOUNDED = lag(SALARY,2),",
						"          LEAD_UNBOUNDED = lead(SALARY, 2),",
						"          DENSE_RANK = denseRank(),",
						"          ROW_NUMBER = rowNumber(),",
						"          RANK = rank(),",
						"          SUM = sum(SALARY),",
						"          COUNT = count(EMPLOYEE_ID),",
						"          AVERAGE = avg(SALARY),",
						"          FIRST_VALUE = first(DEPARTMENT_ID),",
						"          LAST_VALUE = last(DEPARTMENT_ID),",
						"          MIN = min(SALARY),",
						"          MAX = max(SALARY)) ~> window1",
						"window1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          DEPARTMENT_ID,",
						"          SALARY,",
						"          LEAD_SALARY = NEXT_SALARY,",
						"          LAG_SALARY = LAST_SALARY,",
						"          LAG_PREV_2SAL = LAG_UNBOUNDED,",
						"          DENSE_RANK,",
						"          ROW_NUMBER,",
						"          DENSE_RANK",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          emp_id as string,",
						"          name as string",
						"     ),",
						"     partitionFileNames:['TGT_LEADLAG_SAL.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_COUNTRY_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select * from hr.countries where country_id=''',concat(activity('Lookup1').output.firstRow.country_id),'''')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DC_COUNTRY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "src_not_parameterized",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "VAR_CID_ASSIGN",
							"value": "'AR'"
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM LOCATIONS WHERE COUNTRY_ID='CA'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DC_COUNTRY",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"COUNTRY_ID": {
						"type": "string",
						"defaultValue": "'CA'"
					}
				},
				"variables": {
					"VAR_CID": {
						"type": "String",
						"defaultValue": "1"
					},
					"VAR_CID_ASSIGN": {
						"type": "String",
						"defaultValue": "'CA'"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T02:59:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_DATA_DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_COUNTRY_DB",
								"type": "DatasetReference",
								"parameters": {
									"TGT_TABLE": {
										"value": "@pipeline().parameters.TPARAM_COUNTRY",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TPARAM_COUNTRY": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T03:54:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_EXEC2_WAIT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_wildcard_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_EXEC_P1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T03:08:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_CONFIGFILE_DATALOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM HR.CONFIG where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_ORACLETABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"SOURCETABLE": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tgt_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"TARGETFILE": {
													"value": "@item().TARETTABLE",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "startdate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"startdate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-05T01:59:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DATAFLOW_CONDSPLIT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow CONDITIONAL SPLIT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_ALL_FUNCTIONS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMP": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DATAFLOW_PIPE"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-14T00:02:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DB_COUNTRY_QUERY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM HR.COUNTRIES\nWHERE REGION_ID=3",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_QUERY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_COUNTRY_DB",
								"type": "DatasetReference",
								"parameters": {
									"TGT_TABLE": {
										"value": "@pipeline().parameters.QUERYCON",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"QUERYCON": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T03:54:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DB_COUNTRY_QUERY_PARAM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_QUERY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_COUNTRY_DB",
								"type": "DatasetReference",
								"parameters": {
									"TGT_TABLE": {
										"value": "@pipeline().parameters.TGTTABLE",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRCTABLE": {
						"type": "string"
					},
					"TGTTABLE": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T03:54:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DB_COUNTRY_QUERY_VARIABLE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM HR.COUNTRIES\nWHERE REGION_ID=3",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_QUERY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TGT_COUNTRY_DB",
								"type": "DatasetReference",
								"parameters": {
									"TGT_TABLE": {
										"value": "@pipeline().parameters.QUERYCON",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"QUERYCON": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-23T02:06:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DB_PARAM_PRAC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DB_PARAM_PRAC",
								"type": "DatasetReference",
								"parameters": {
									"TABLE_NAME": {
										"value": "@pipeline().parameters.SOURCE_DB",
										"type": "Expression"
									},
									"SCHEMA": {
										"value": "@pipeline().parameters.SRC_SCHEMA",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BLOB_DB_EMP_PRAC",
								"type": "DatasetReference",
								"parameters": {
									"TGT_PARAM_EMP": {
										"value": "@pipeline().parameters.TARGET_DB",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SOURCE_DB": {
						"type": "string"
					},
					"TARGET_DB": {
						"type": "string"
					},
					"SRC_SCHEMA": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-23T03:21:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DB_PARAM_PRAC_QUERY_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DB_PARAM_PRAC",
								"type": "DatasetReference",
								"parameters": {
									"TABLE_NAME": {
										"value": "@pipeline().parameters.SOURCE_DB",
										"type": "Expression"
									},
									"SCHEMA": {
										"value": "@pipeline().parameters.SRC_SCHEMA",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BLOB_DB_EMP_PRAC",
								"type": "DatasetReference",
								"parameters": {
									"TGT_PARAM_EMP": {
										"value": "@pipeline().parameters.TARGET_DB",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID = 50",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "LKP_DB",
								"type": "DatasetReference",
								"parameters": {
									"LKP_TABLE_NAME": {
										"value": "@pipeline().parameters.LKP_TABLE_NAME_P",
										"type": "Expression"
									},
									"LKP_SCHEMA_NAME": "HR"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "VARIDEPTID",
							"value": {
								"value": "@variables('VARDEPTNEW')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SOURCE_DB": {
						"type": "string"
					},
					"TARGET_DB": {
						"type": "string"
					},
					"SRC_SCHEMA": {
						"type": "string"
					},
					"LKP_TABLE_NAME_P": {
						"type": "string"
					},
					"LKP_SCHEMA_P": {
						"type": "string"
					}
				},
				"variables": {
					"VARIDEPTID": {
						"type": "String"
					},
					"VARDEPTNEW": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-24T04:16:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_EXECUTE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_wildcard_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_wildcard_copy1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T02:38:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_JOIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_JOINS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMP": {},
									"DEPT": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-12T02:18:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_JOIN_TWOTABLES_ORACLE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT E.SRC_EMPLOYEE_ID,E.SRC_FIRST_NAME,E.SRC_LAST_NAME,E.SRC_DEPARTMENT_ID,D.DEPARTMENT_NAME,D.MANAGER_ID,D.LOCATION_ID  FROM HR.TGT_EMP_DEPT_DT E\nINNER JOIN HR.DEPARTMENTS D\nON E.SRC_DEPARTMENT_ID = D.DEPARTMENT_ID",
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_JOIN_EMP_DEPT",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle_TGT_JOINTWO_TABLES",
								"type": "DatasetReference",
								"parameters": {
									"TGTTABLE": {
										"value": "@pipeline().parameters.TGT_EMP_DEPT_JOIN",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TGT_EMP_DEPT_JOIN": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ASSIGNMENTS"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-19T03:55:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_LKP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 50",
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "LKP_DB",
								"type": "DatasetReference",
								"parameters": {
									"LKP_TABLE_NAME": {
										"value": "@pipeline().parameters.DEPARTMENT_ID",
										"type": "Expression"
									},
									"LKP_SCHEMA_NAME": "HR"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM EMPLOYEES ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Oracle_QUERY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DB_LKP_EMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "VARDEPARTMENT",
							"value": {
								"value": "@pipeline().parameters.DEPARTMENT_ID",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DEPARTMENT_ID": {
						"type": "string"
					}
				},
				"variables": {
					"VARDEPARTMENT": {
						"type": "String",
						"defaultValue": "20"
					},
					"VAR_DEPT_ID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ORACLE_HR"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-23T03:35:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_MULTIPLE_TABLE_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM DATALOAD WHERE ACTIVEFLAG =1 ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "TGT_Oracle_CONFIG_PRAC",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DB_DATALOAD_PRAC_PARAM",
											"type": "DatasetReference",
											"parameters": {
												"SOURCETABLE": {
													"value": "@item().SOURCETABLE",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DATALOAD_FILE_PRAC_PARA",
											"type": "DatasetReference",
											"parameters": {
												"TARGETTABLE": {
													"value": "@concat(item().TARGETTABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Oracle1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.DATALOAD set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'''''',source = ''',activity('Copy data1').output.rowsRead,''',target = ''',activity('Copy data1').output.rowsCopied,'''  where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PARAMPATH"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-06T04:00:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_MULTIPLE_TABLE_LOAD_PRAC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT * FROM DATALOAD",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "TGT_Oracle_CONFIG_PRAC",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DB_DATALOAD_PRAC_PARAM",
											"type": "DatasetReference",
											"parameters": {
												"SOURCETABLE": {
													"value": "@item().SOURCETABLE",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DATALOAD_FILE_PRAC_PARA",
											"type": "DatasetReference",
											"parameters": {
												"TARGETTABLE": {
													"value": "@concat(item().TARGETTABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "PARAMPATH"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T04:24:18Z"
			},
			"dependsOn": []
		}
	]
}